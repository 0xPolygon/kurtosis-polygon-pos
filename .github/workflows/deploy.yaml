name: deploy

on:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: deploy-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  KURTOSIS_VERSION: 1.4.3
  ENCLAVE_NAME: pos

jobs:
  run-without-args:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}
      
      - name: Debug (to remove)
        run: docker ps

      - name: Check CL nodes have peers
        run: |
          node_name="heimdall-0"
          expected_peers_number=2

          # Get the docker identifier of the first CL node.
          node_docker_id=$(docker ps --filter "name=${node_name}" --format "{{.ID}}")
          if [ -z "$node_docker_id" ]; then
            echo "❌ Failed to find docker container for ${node_name}."
            exit 1
          fi

          # Start the helper container.
          helper_container_docker_id=$(docker run --detach --net="container:${node_docker_id}" nicolaka/netshoot:latest /bin/bash)
          if [ -z "$helper_container_docker_id" ]; then
            echo "❌ Failed to start helper container."
            exit 1
          fi

          # Check the number of peers.
          peers_number=$(docker exec "${helper_container_docker_id}" curl --silent localhost:26657/net_info | jq '.result.peers | length')
          if [ -z "$peers_number" ]; then
            echo "❌ Failed to get peer information."
            exit 1
          fi
          
          # Check if the number of peers matches the expected number.
          if ((peers_number == expected_peers_number)); then
            echo "✅ Right number of peers (${peers_number}) found! The CL nodes are connected."
          else
            echo "❌ Expected ${expected_peers_number} peers but found ${peers_number}... The CL nodes are not connected."
            exit 1
          fi
      
      - name: Check EL nodes have peers
        run: |
          node_name="bor-0"
          expected_peers_number=2

          # Get the docker identifier of the first EL node.
          node_docker_id=$(docker ps --filter "name=${node_name}" --format "{{.ID}}")
          if [ -z "$node_docker_id" ]; then
            echo "❌ Failed to find docker container for ${node_name}."
            exit 1
          fi

          # Start the helper container.
          helper_container_docker_id=$(docker run --detach --net="container:${node_docker_id}" nicolaka/netshoot:latest /bin/bash)
          if [ -z "$helper_container_docker_id" ]; then
            echo "❌ Failed to start helper container."
            exit 1
          fi

          # Check the number of peers.
          peers_number=$(docker exec "${helper_container_docker_id}" echo $(($(curl -s -H "Content-Type: application/json" --data '{"jsonrpc": "2.0", "method": "net_peerCount", "params": [], "id": 1}' localhost:8545 | jq --raw-output '.result'))))
          if [ -z "$peers_number" ]; then
            echo "❌ Failed to get peer information."
            exit 1
          fi
          
          # Check if the number of peers matches the expected number.
          if ((peers_number == expected_peers_number)); then
            echo "✅ Right number of peers (${peers_number}) found! The EL nodes are connected."
          else
            echo "❌ Expected ${expected_peers_number} peers but found ${peers_number}... The EL nodes are not connected."
            exit 1
          fi

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: dump_run_without_args_${{ github.run_id }}
          path: ./dump

  list-ymls:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        run: |
          files=$(ls -R ./.github/tests/*.yml)
          matrix=$(echo "$files" | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  run-with-args:
    needs: list-ymls
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        file_name: ${{ fromJson(needs.list-ymls.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file=${{ matrix.file_name }} --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}
      
      - name: Check CL nodes have peers
        run: |
          node_name="$(yq --raw-output '.polygon_pos_package.participants[0].cl_type' ${{ matrix.file_name }})-0"
          expected_peers_number=2

          # Get the docker identifier of the first CL node.
          node_docker_id=$(docker ps --filter "name=${node_name}" --format "{{.ID}}")
          if [ -z "$node_docker_id" ]; then
            echo "❌ Failed to find docker container for ${node_name}."
            exit 1
          fi

          # Start the helper container.
          helper_container_docker_id=$(docker run --detach --net="container:${node_docker_id}" nicolaka/netshoot:latest /bin/bash)
          if [ -z "$helper_container_docker_id" ]; then
            echo "❌ Failed to start helper container."
            exit 1
          fi

          # Check the number of peers.
          peers_number=$(docker exec "${helper_container_docker_id}" curl --silent localhost:26657/net_info | jq '.result.peers | length')
          if [ -z "$peers_number" ]; then
            echo "❌ Failed to get peer information."
            exit 1
          fi
          
          # Check if the number of peers matches the expected number.
          if ((peers_number == expected_peers_number)); then
            echo "✅ Right number of peers (${peers_number}) found! The CL nodes are connected."
          else
            echo "❌ Expected ${expected_peers_number} peers but found ${peers_number}... The CL nodes are not connected."
            exit 1
          fi
      
      - name: Check EL nodes have peers
        run: |
          node_name="$(yq --raw-output '.polygon_pos_package.participants[0].el_type' ${{ matrix.file_name }})-0"
          expected_peers_number=2

          # Get the docker identifier of the first EL node.
          node_docker_id=$(docker ps --filter "name=${node_name}" --format "{{.ID}}")
          if [ -z "$node_docker_id" ]; then
            echo "❌ Failed to find docker container for ${node_name}."
            exit 1
          fi

          # Start the helper container.
          helper_container_docker_id=$(docker run --detach --net="container:${node_docker_id}" nicolaka/netshoot:latest /bin/bash)
          if [ -z "$helper_container_docker_id" ]; then
            echo "❌ Failed to start helper container."
            exit 1
          fi

          # Check the number of peers.
          peers_number=$(docker exec "${helper_container_docker_id}" echo $(($(curl -s -H "Content-Type: application/json" --data '{"jsonrpc": "2.0", "method": "net_peerCount", "params": [], "id": 1}' localhost:8545 | jq --raw-output '.result'))))
          if [ -z "$peers_number" ]; then
            echo "❌ Failed to get peer information."
            exit 1
          fi
          
          # Check if the number of peers matches the expected number.
          if ((peers_number == expected_peers_number)); then
            echo "✅ Right number of peers (${peers_number}) found! The EL nodes are connected."
          else
            echo "❌ Expected ${expected_peers_number} peers but found ${peers_number}... The EL nodes are not connected."
            exit 1
          fi

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Generate archive name
        if: ${{ !cancelled() }}
        run: |
          file_name=$(basename "${{ matrix.file_name }}" ".yml")
          archive_name="dump_run_with_args_${file_name}_${{ github.run_id }}"
          echo "ARCHIVE_NAME=${archive_name}" >> "$GITHUB_ENV"
          echo "Generated archive name: ${archive_name}"

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ./dump

  run-with-external-l1:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable
      
      - name: Deploy L1
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file ./.github/tests/external-l1/ethereum.yml github.com/ethpandaops/ethereum-package@4.4.0

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file=./.github/tests/external-l1/polygon-pos-with-l1-pre-deployed.yml --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}
      
      - name: Check CL nodes have peers
        run: |
          node_name="heimdall-0"
          expected_peers_number=2

          # Get the docker identifier of the first CL node.
          node_docker_id=$(docker ps --filter "name=${node_name}" --format "{{.ID}}")
          if [ -z "$node_docker_id" ]; then
            echo "❌ Failed to find docker container for ${node_name}."
            exit 1
          fi

          # Start the helper container.
          helper_container_docker_id=$(docker run --detach --net="container:${node_docker_id}" nicolaka/netshoot:latest /bin/bash)
          if [ -z "$helper_container_docker_id" ]; then
            echo "❌ Failed to start helper container."
            exit 1
          fi

          # Check the number of peers.
          peers_number=$(docker exec "${helper_container_docker_id}" curl --silent localhost:26657/net_info | jq '.result.peers | length')
          if [ -z "$peers_number" ]; then
            echo "❌ Failed to get peer information."
            exit 1
          fi
          
          # Check if the number of peers matches the expected number.
          if ((peers_number == expected_peers_number)); then
            echo "✅ Right number of peers (${peers_number}) found! The CL nodes are connected."
          else
            echo "❌ Expected ${expected_peers_number} peers but found ${peers_number}... The CL nodes are not connected."
            exit 1
          fi
      
      - name: Check EL nodes have peers
        run: |
          node_name="bor-0"
          expected_peers_number=2

          # Get the docker identifier of the first EL node.
          node_docker_id=$(docker ps --filter "name=${node_name}" --format "{{.ID}}")
          if [ -z "$node_docker_id" ]; then
            echo "❌ Failed to find docker container for ${node_name}."
            exit 1
          fi

          # Start the helper container.
          helper_container_docker_id=$(docker run --detach --net="container:${node_docker_id}" nicolaka/netshoot:latest /bin/bash)
          if [ -z "$helper_container_docker_id" ]; then
            echo "❌ Failed to start helper container."
            exit 1
          fi

          # Check the number of peers.
          peers_number=$(docker exec "${helper_container_docker_id}" echo $(($(curl -s -H "Content-Type: application/json" --data '{"jsonrpc": "2.0", "method": "net_peerCount", "params": [], "id": 1}' localhost:8545 | jq --raw-output '.result'))))
          if [ -z "$peers_number" ]; then
            echo "❌ Failed to get peer information."
            exit 1
          fi
          
          # Check if the number of peers matches the expected number.
          if ((peers_number == expected_peers_number)); then
            echo "✅ Right number of peers (${peers_number}) found! The EL nodes are connected."
          else
            echo "❌ Expected ${expected_peers_number} peers but found ${peers_number}... The EL nodes are not connected."
            exit 1
          fi

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: dump_run_with_external_l1_${{ github.run_id }}
          path: ./dump
  
  run-with-external-l1-and-pre-deployed-matic-contracts:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable
      
      - name: Deploy L1, MATIC contracts and network participants
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} .
      
      - name: Save L2 EL EL genesis
        run: |
          kurtosis files inspect ${{ env.ENCLAVE_NAME }} l2-el-genesis genesis.json | tail -n +2 | jq > l2-el-genesis.json
          cat l2-el-genesis.json
      
      - name: Save L2 CL genesis
        run: |
          kurtosis files inspect ${{ env.ENCLAVE_NAME }} l2-cl-genesis genesis.json | tail -n +2 | jq > l2-cl-genesis.json
          cat l2-cl-genesis.json

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file=./.github/tests/external-l1/polygon-pos-with-l1-and-matic-contracts-pre-deployed.yml --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}
      
      - name: Check CL nodes have peers
        run: |
          node_name="heimdall-0"
          expected_peers_number=2

          # Get the docker identifier of the first CL node.
          node_docker_id=$(docker ps --filter "name=${node_name}" --format "{{.ID}}")
          if [ -z "$node_docker_id" ]; then
            echo "❌ Failed to find docker container for ${node_name}."
            exit 1
          fi

          # Start the helper container.
          helper_container_docker_id=$(docker run --detach --net="container:${node_docker_id}" nicolaka/netshoot:latest /bin/bash)
          if [ -z "$helper_container_docker_id" ]; then
            echo "❌ Failed to start helper container."
            exit 1
          fi

          # Check the number of peers.
          peers_number=$(docker exec "${helper_container_docker_id}" curl --silent localhost:26657/net_info | jq '.result.peers | length')
          if [ -z "$peers_number" ]; then
            echo "❌ Failed to get peer information."
            exit 1
          fi
          
          # Check if the number of peers matches the expected number.
          if ((peers_number == expected_peers_number)); then
            echo "✅ Right number of peers (${peers_number}) found! The CL nodes are connected."
          else
            echo "❌ Expected ${expected_peers_number} peers but found ${peers_number}... The CL nodes are not connected."
            exit 1
          fi
      
      - name: Check EL nodes have peers
        run: |
          node_name="bor-0"
          expected_peers_number=2

          # Get the docker identifier of the first EL node.
          node_docker_id=$(docker ps --filter "name=${node_name}" --format "{{.ID}}")
          if [ -z "$node_docker_id" ]; then
            echo "❌ Failed to find docker container for ${node_name}."
            exit 1
          fi

          # Start the helper container.
          helper_container_docker_id=$(docker run --detach --net="container:${node_docker_id}" nicolaka/netshoot:latest /bin/bash)
          if [ -z "$helper_container_docker_id" ]; then
            echo "❌ Failed to start helper container."
            exit 1
          fi

          # Check the number of peers.
          peers_number=$(docker exec "${helper_container_docker_id}" echo $(($(curl -s -H "Content-Type: application/json" --data '{"jsonrpc": "2.0", "method": "net_peerCount", "params": [], "id": 1}' localhost:8545 | jq --raw-output '.result'))))
          if [ -z "$peers_number" ]; then
            echo "❌ Failed to get peer information."
            exit 1
          fi
          
          # Check if the number of peers matches the expected number.
          if ((peers_number == expected_peers_number)); then
            echo "✅ Right number of peers (${peers_number}) found! The EL nodes are connected."
          else
            echo "❌ Expected ${expected_peers_number} peers but found ${peers_number}... The EL nodes are not connected."
            exit 1
          fi

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: dump_run_with_external_l1_and_pre_deployed_matic_contracts_${{ github.run_id }}
          path: ./dump
