name: deploy

on:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: deploy-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  KURTOSIS_VERSION: "1.4.3"
  FOUNDRY_VERSION: "v0.3.0"
  POLYCLI_VERSION: "v0.1.65"
  ENCLAVE_NAME: pos

jobs:
  run-without-args:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable
          kurtosis version
      
      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FOUNDRY_VERSION }}
      
      - name: Install polycli
        run: |
          POLYCLI_VERSION="${{ env.POLYCLI_VERSION }}"
          tmp_dir=$(mktemp -d) 
          curl -L "https://github.com/0xPolygon/polygon-cli/releases/download/${POLYCLI_VERSION}/polycli_${POLYCLI_VERSION}_linux_amd64.tar.gz" | tar -xz -C "$tmp_dir" 
          mv "$tmp_dir"/* /usr/local/bin/polycli 
          rm -rf "$tmp_dir"
          sudo chmod +x /usr/local/bin/polycli
          /usr/local/bin/polycli version

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}
      
      - name: Check devnet status
        run: |
          export ETH_RPC_URL="$(kurtosis port print ${{ env.ENCLAVE_NAME }} bor-0 rpc)"
          private_key="0x2a4ae8c4c250917781d38d95dafbb0abe87ae2c9aea02ed7c7524685358e49c2"

          echo "Waiting for L2 RPC to be available..."          
          counter=0
          max_retries=20
          until cast send --private-key "${private_key}" --value 0 2>/dev/null; do
            ((counter++))
            echo "Can't send transfers yet... Retrying ($counter)..."
            if [[ "${counter}" -ge "${max_retries}" ]]; then
              echo "Exceeded maximum retry attempts. Exiting."
              exit 1
            fi
            sleep 5
          done
          echo "✅ L2 RPC is available!"

          echo "Sending some load to the network..."
          polycli loadtest --rpc-url "${ETH_RPC_URL}" --legacy --private-key "${private_key}" --verbosity 700 --requests 5000 --rate-limit 50 --mode t &

          echo "Checking the status of the devnet..."
          export ENCLAVE=${{ env.ENCLAVE_NAME }}
          bash scripts/check_status.sh --monitor
      
      - name: Look for stopped services
        run: |
          stopped_services="$(kurtosis enclave inspect ${{ env.ENCLAVE_NAME }} | grep STOPPED)"
          if [[ -n "${stopped_services}" ]]; then
            echo "It looks like there is at least one stopped service in the enclave... Something must have halted..."
            echo "${stopped_services}"
            echo

            kurtosis enclave inspect ${{ env.ENCLAVE_NAME }} --full-uuids | grep STOPPED | awk '{print $2 "--" $1}' \
              | while read -r container; do echo "Printing logs for $container"; docker logs --tail 50 "$container"; done
            exit 1
          fi

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: dump_run_without_args_${{ github.run_id }}
          path: ./dump

  list-ymls:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        run: |
          files=$(ls -R ./.github/tests/*.yml)
          matrix=$(echo "$files" | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  run-with-args:
    needs: list-ymls
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        file_name: ${{ fromJson(needs.list-ymls.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Install yq
        run: |
          pip3 install yq
          yq --version

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable
          kurtosis version
      
      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FOUNDRY_VERSION }}
      
      - name: Install polycli
        run: |
          POLYCLI_VERSION="${{ env.POLYCLI_VERSION }}"
          tmp_dir=$(mktemp -d) 
          curl -L "https://github.com/0xPolygon/polygon-cli/releases/download/${POLYCLI_VERSION}/polycli_${POLYCLI_VERSION}_linux_amd64.tar.gz" | tar -xz -C "$tmp_dir" 
          mv "$tmp_dir"/* /usr/local/bin/polycli 
          rm -rf "$tmp_dir"
          sudo chmod +x /usr/local/bin/polycli
          /usr/local/bin/polycli version

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file=${{ matrix.file_name }} --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Check devnet status
        run: |
          export ETH_RPC_URL="$(kurtosis port print ${{ env.ENCLAVE_NAME }} bor-0 rpc)"
          private_key="0x2a4ae8c4c250917781d38d95dafbb0abe87ae2c9aea02ed7c7524685358e49c2"

          echo "Waiting for L2 RPC to be available..."          
          counter=0
          max_retries=20
          until cast send --private-key "${private_key}" --value 0 2>/dev/null; do
            ((counter++))
            echo "Can't send transfers yet... Retrying ($counter)..."
            if [[ "${counter}" -ge "${max_retries}" ]]; then
              echo "Exceeded maximum retry attempts. Exiting."
              exit 1
            fi
            sleep 5
          done
          echo "✅ L2 RPC is available!"

          echo "Sending some load to the network..."
          polycli loadtest --rpc-url "${ETH_RPC_URL}" --legacy --private-key "${private_key}" --verbosity 700 --requests 5000 --rate-limit 50 --mode t &

          echo "Checking the status of the devnet..."
          export ENCLAVE=${{ env.ENCLAVE_NAME }}
          bash scripts/check_status.sh --monitor
      
      - name: Look for stopped services
        run: |
          stopped_services="$(kurtosis enclave inspect ${{ env.ENCLAVE_NAME }} | grep STOPPED)"
          if [[ -n "${stopped_services}" ]]; then
            echo "It looks like there is at least one stopped service in the enclave... Something must have halted..."
            echo "${stopped_services}"
            echo

            kurtosis enclave inspect ${{ env.ENCLAVE_NAME }} --full-uuids | grep STOPPED | awk '{print $2 "--" $1}' \
              | while read -r container; do echo "Printing logs for $container"; docker logs --tail 50 "$container"; done
            exit 1
          fi

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Generate archive name
        if: ${{ !cancelled() }}
        run: |
          file_name=$(basename "${{ matrix.file_name }}" ".yml")
          archive_name="dump_run_with_args_${file_name}_${{ github.run_id }}"
          echo "ARCHIVE_NAME=${archive_name}" >> "$GITHUB_ENV"
          echo "Generated archive name: ${archive_name}"

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ./dump

  run-with-external-l1:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable
          kurtosis version
      
      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FOUNDRY_VERSION }}
      
      - name: Install polycli
        run: |
          POLYCLI_VERSION="${{ env.POLYCLI_VERSION }}"
          tmp_dir=$(mktemp -d) 
          curl -L "https://github.com/0xPolygon/polygon-cli/releases/download/${POLYCLI_VERSION}/polycli_${POLYCLI_VERSION}_linux_amd64.tar.gz" | tar -xz -C "$tmp_dir" 
          mv "$tmp_dir"/* /usr/local/bin/polycli 
          rm -rf "$tmp_dir"
          sudo chmod +x /usr/local/bin/polycli
          /usr/local/bin/polycli version
      
      - name: Deploy L1
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file ./.github/tests/external-l1/ethereum.yml github.com/ethpandaops/ethereum-package@4.4.0

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file=./.github/tests/external-l1/polygon-pos-with-l1-pre-deployed.yml --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Check devnet status
        run: |
          export ETH_RPC_URL="$(kurtosis port print ${{ env.ENCLAVE_NAME }} bor-0 rpc)"
          private_key="0x2a4ae8c4c250917781d38d95dafbb0abe87ae2c9aea02ed7c7524685358e49c2"

          echo "Waiting for L2 RPC to be available..."          
          counter=0
          max_retries=20
          until cast send --private-key "${private_key}" --value 0 2>/dev/null; do
            ((counter++))
            echo "Can't send transfers yet... Retrying ($counter)..."
            if [[ "${counter}" -ge "${max_retries}" ]]; then
              echo "Exceeded maximum retry attempts. Exiting."
              exit 1
            fi
            sleep 5
          done
          echo "✅ L2 RPC is available!"

          echo "Sending some load to the network..."
          polycli loadtest --rpc-url "${ETH_RPC_URL}" --legacy --private-key "${private_key}" --verbosity 700 --requests 5000 --rate-limit 50 --mode t &

          echo "Checking the status of the devnet..."
          export ENCLAVE=${{ env.ENCLAVE_NAME }}
          bash scripts/check_status.sh --monitor
      
      - name: Look for stopped services
        run: |
          stopped_services="$(kurtosis enclave inspect ${{ env.ENCLAVE_NAME }} | grep STOPPED)"
          if [[ -n "${stopped_services}" ]]; then
            echo "It looks like there is at least one stopped service in the enclave... Something must have halted..."
            echo "${stopped_services}"
            echo

            kurtosis enclave inspect ${{ env.ENCLAVE_NAME }} --full-uuids | grep STOPPED | awk '{print $2 "--" $1}' \
              | while read -r container; do echo "Printing logs for $container"; docker logs --tail 50 "$container"; done
            exit 1
          fi

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: dump_run_with_external_l1_${{ github.run_id }}
          path: ./dump
  
  run-with-external-l1-and-pre-deployed-matic-contracts:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable
          kurtosis version
      
      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FOUNDRY_VERSION }}
      
      - name: Install polycli
        run: |
          POLYCLI_VERSION="${{ env.POLYCLI_VERSION }}"
          tmp_dir=$(mktemp -d) 
          curl -L "https://github.com/0xPolygon/polygon-cli/releases/download/${POLYCLI_VERSION}/polycli_${POLYCLI_VERSION}_linux_amd64.tar.gz" | tar -xz -C "$tmp_dir" 
          mv "$tmp_dir"/* /usr/local/bin/polycli 
          rm -rf "$tmp_dir"
          sudo chmod +x /usr/local/bin/polycli
          /usr/local/bin/polycli version
      
      - name: Deploy L1, MATIC contracts and network participants
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} .
      
      - name: Save L2 EL EL genesis
        run: |
          kurtosis files inspect ${{ env.ENCLAVE_NAME }} l2-el-genesis genesis.json | tail -n +2 | jq > l2-el-genesis.json
          cat l2-el-genesis.json
      
      - name: Save L2 CL genesis
        run: |
          kurtosis files inspect ${{ env.ENCLAVE_NAME }} l2-cl-genesis genesis.json | tail -n +2 | jq > l2-cl-genesis.json
          cat l2-cl-genesis.json

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file=./.github/tests/external-l1/polygon-pos-with-l1-and-matic-contracts-pre-deployed.yml --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Check devnet status
        run: |
          export ETH_RPC_URL="$(kurtosis port print ${{ env.ENCLAVE_NAME }} bor-0 rpc)"
          private_key="0x2a4ae8c4c250917781d38d95dafbb0abe87ae2c9aea02ed7c7524685358e49c2"

          echo "Waiting for L2 RPC to be available..."          
          counter=0
          max_retries=20
          until cast send --private-key "${private_key}" --value 0 2>/dev/null; do
            ((counter++))
            echo "Can't send transfers yet... Retrying ($counter)..."
            if [[ "${counter}" -ge "${max_retries}" ]]; then
              echo "Exceeded maximum retry attempts. Exiting."
              exit 1
            fi
            sleep 5
          done
          echo "✅ L2 RPC is available!"

          echo "Sending some load to the network..."
          polycli loadtest --rpc-url "${ETH_RPC_URL}" --legacy --private-key "${private_key}" --verbosity 700 --requests 5000 --rate-limit 50 --mode t &

          echo "Checking the status of the devnet..."
          export ENCLAVE=${{ env.ENCLAVE_NAME }}
          bash scripts/check_status.sh --monitor
      
      - name: Look for stopped services
        run: |
          stopped_services="$(kurtosis enclave inspect ${{ env.ENCLAVE_NAME }} | grep STOPPED)"
          if [[ -n "${stopped_services}" ]]; then
            echo "It looks like there is at least one stopped service in the enclave... Something must have halted..."
            echo "${stopped_services}"
            echo

            kurtosis enclave inspect ${{ env.ENCLAVE_NAME }} --full-uuids | grep STOPPED | awk '{print $2 "--" $1}' \
              | while read -r container; do echo "Printing logs for $container"; docker logs --tail 50 "$container"; done
            exit 1
          fi

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: dump_run_with_external_l1_and_pre_deployed_matic_contracts_${{ github.run_id }}
          path: ./dump
