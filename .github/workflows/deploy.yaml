name: deploy

on:
  pull_request:
  push:
    branches: [main]

concurrency:
  group: deploy-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  KURTOSIS_VERSION: "1.4.3"
  FOUNDRY_VERSION: "v0.3.0"
  ENCLAVE_NAME: pos

jobs:
  run-without-args:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable
          kurtosis version

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FOUNDRY_VERSION }}

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Wait for the first block producer to commit a span
        run: |
          # Wait for the first producer to produce blocks on the EL chain.
          start_time=$(date +%s)
          timeout_duration=120 # in seconds
          while true; do
            # New block check.
            el_node_output=$(kurtosis service logs ${{ env.ENCLAVE_NAME }} l2-el-1-bor-heimdall-validator --all)
            cl_node_output=$(kurtosis service logs ${{ env.ENCLAVE_NAME }} l2-cl-1-heimdall-bor-validator --all)
            if echo "${el_node_output}" | grep -q "Committing new span"; then
              echo "✅ The first producer committed a span!"
              echo; echo "EL node output:"; echo "${el_node_output}"
              echo; echo "CL node output:"; echo "${cl_node_output}"
              break
            fi

            # Timeout check.
            current_time=$(date +%s)
            if [[ $((current_time - start_time)) -ge ${timeout_duration} ]]; then
              echo "❌ Timeout occurred after ${timeout_duration} seconds. The first producer has not committed any span yet..."
              echo; echo "EL node output:"; echo "${el_node_output}"
              echo; echo "CL node output:"; echo "${cl_node_output}"
              exit 1
            fi

            echo "Checking again in 15 seconds..."
            sleep 15
          done

      - name: Check devnet status
        env:
          ENCLAVE: ${{ env.ENCLAVE_NAME }}
        run: bash scripts/discover.sh && bash scripts/monitor.sh

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: dump_run_without_args_${{ github.run_id }}
          path: ./dump

  list-ymls:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4

      - id: set-matrix
        run: |
          files=$(ls -R ./.github/tests/*.yml)
          matrix=$(echo "$files" | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  run-with-args:
    needs: list-ymls
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        file_name: ${{ fromJson(needs.list-ymls.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable
          kurtosis version

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FOUNDRY_VERSION }}

      - name: Install yq
        run: |
          pip3 install yq
          yq --version

      - name: Get heimdall-v2 private image
        run: docker pull leovct/heimdall-v2:e0a87ca
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file=${{ matrix.file_name }} --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Wait for the first block producer to commit a span
        run: |
          cl_type=$(yq --raw-output '.polygon_pos_package.participants[0].cl_type' ${{ matrix.file_name }})
          if [[ "${cl_type}" == "null" ]]; then
            cl_type="heimdall"
          fi
          el_type=$(yq --raw-output '.polygon_pos_package.participants[0].el_type' ${{ matrix.file_name }})
          if [[ "${cl_type}" == "null" ]]; then
            el_type="bor"
          fi
          cl_node_name="l2-cl-1-${cl_type}-${el_type}-validator"
          el_node_name="l2-el-1-${el_type}-${cl_type}-validator"

          # Wait for the first producer to produce blocks on the EL chain.
          start_time=$(date +%s)
          timeout_duration=120 # in seconds
          while true; do
            # New block check.
            cl_node_output=$(kurtosis service logs ${{ env.ENCLAVE_NAME }} "${cl_node_name}" --all)
            el_node_output=$(kurtosis service logs ${{ env.ENCLAVE_NAME }} "${el_node_name}" --all)
            if echo "${el_node_output}" | grep -q "Committing new span"; then
              echo "✅ The first producer committed a span!"
              echo; echo "EL node output:"; echo "${el_node_output}"
              echo; echo "CL node output:"; echo "${cl_node_output}"
              break
            fi

            # Timeout check.
            current_time=$(date +%s)
            if [[ $((current_time - start_time)) -ge ${timeout_duration} ]]; then
              echo "❌ Timeout occurred after ${timeout_duration} seconds. The first producer has not committed any span yet..."
              echo; echo "EL node output:"; echo "${el_node_output}"
              echo; echo "CL node output:"; echo "${cl_node_output}"
              exit 1
            fi

            echo "Checking again in 15 seconds..."
            sleep 15
          done

      - name: Check devnet status
        env:
          ENCLAVE: ${{ env.ENCLAVE_NAME }}
        run: |
          bash scripts/discover.sh

          # If the devnet only contains one validator, don't check the peer count.
          file_name=$(basename "${{ matrix.file_name }}" ".yml")
          if [[ "${file_name}" =~ .*"single-validator" ]]; then
            export EXPECTED_MIN_CL_PEERS=0
            export EXPECTED_MIN_EL_PEERS=0
          fi
          bash scripts/monitor.sh

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Generate archive name
        if: ${{ !cancelled() }}
        run: |
          file_name=$(basename "${{ matrix.file_name }}" ".yml")
          archive_name="dump_run_with_args_${file_name}_${{ github.run_id }}"
          echo "ARCHIVE_NAME=${archive_name}" >> "$GITHUB_ENV"
          echo "Generated archive name: ${archive_name}"

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARCHIVE_NAME }}
          path: ./dump

  run-with-external-l1:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable
          kurtosis version

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FOUNDRY_VERSION }}

      - name: Deploy L1
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file ./.github/tests/external-l1/ethereum.yml github.com/ethpandaops/ethereum-package@4.4.0

      - name: Deploy L2
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file=./.github/tests/external-l1/polygon-pos-with-external-l1.yml --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Wait for the first block producer to commit a span
        run: |
          # Wait for the first producer to produce blocks on the EL chain.
          start_time=$(date +%s)
          timeout_duration=120 # in seconds
          while true; do
            # New block check.
            el_node_output=$(kurtosis service logs ${{ env.ENCLAVE_NAME }} l2-el-1-bor-heimdall-validator --all)
            cl_node_output=$(kurtosis service logs ${{ env.ENCLAVE_NAME }} l2-cl-1-heimdall-bor-validator --all)
            if echo "${el_node_output}" | grep -q "Committing new span"; then
              echo "✅ The first producer committed a span!"
              echo; echo "EL node output:"; echo "${el_node_output}"
              echo; echo "CL node output:"; echo "${cl_node_output}"
              break
            fi

            # Timeout check.
            current_time=$(date +%s)
            if [[ $((current_time - start_time)) -ge ${timeout_duration} ]]; then
              echo "❌ Timeout occurred after ${timeout_duration} seconds. The first producer has not committed any span yet..."
              echo; echo "EL node output:"; echo "${el_node_output}"
              echo; echo "CL node output:"; echo "${cl_node_output}"
              exit 1
            fi

            echo "Checking again in 15 seconds..."
            sleep 15
          done

      - name: Check devnet status
        env:
          ENCLAVE: ${{ env.ENCLAVE_NAME }}
        run: bash scripts/discover.sh && bash scripts/monitor.sh

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: dump_run_with_external_l1_${{ github.run_id }}
          path: ./dump

  run-with-cl-el-genesis:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
        # This step will only execute if the necessary secrets are available, preventing failures
        # on pull requests from forked repositories.
        if: ${{ env.DOCKERHUB_USERNAME && env.DOCKERHUB_TOKEN }}
        env:
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Install kurtosis
        run: |
          echo "deb [trusted=yes] https://apt.fury.io/kurtosis-tech/ /" | sudo tee /etc/apt/sources.list.d/kurtosis.list
          sudo apt update
          sudo apt install kurtosis-cli=${{ env.KURTOSIS_VERSION }}
          kurtosis analytics disable
          kurtosis version

      - name: Install foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: ${{ env.FOUNDRY_VERSION }}

      - name: Run Starlark
        run: kurtosis run --enclave=${{ env.ENCLAVE_NAME }} --args-file=./.github/tests/cl-el-genesis/polygon-pos-with-cl-el-genesis.yml --show-enclave-inspect=false .

      - name: Inspect enclave
        run: kurtosis enclave inspect ${{ env.ENCLAVE_NAME }}

      - name: Wait for the first block producer to commit a span
        run: |
          # Wait for the first producer to produce blocks on the EL chain.
          start_time=$(date +%s)
          timeout_duration=120 # in seconds
          while true; do
            # New block check.
            el_node_output=$(kurtosis service logs ${{ env.ENCLAVE_NAME }} l2-el-1-bor-heimdall-validator --all)
            cl_node_output=$(kurtosis service logs ${{ env.ENCLAVE_NAME }} l2-cl-1-heimdall-bor-validator --all)
            if echo "${el_node_output}" | grep -q "Committing new span"; then
              echo "✅ The first producer committed a span!"
              echo; echo "EL node output:"; echo "${el_node_output}"
              echo; echo "CL node output:"; echo "${cl_node_output}"
              break
            fi

            # Timeout check.
            current_time=$(date +%s)
            if [[ $((current_time - start_time)) -ge ${timeout_duration} ]]; then
              echo "❌ Timeout occurred after ${timeout_duration} seconds. The first producer has not committed any span yet..."
              echo; echo "EL node output:"; echo "${el_node_output}"
              echo; echo "CL node output:"; echo "${cl_node_output}"
              exit 1
            fi

            echo "Checking again in 15 seconds..."
            sleep 15
          done

      - name: Check devnet status
        env:
          ENCLAVE: ${{ env.ENCLAVE_NAME }}
        run: bash scripts/discover.sh && bash scripts/monitor.sh

      - name: Dump enclave
        if: ${{ !cancelled() }}
        run: kurtosis enclave dump ${{ env.ENCLAVE_NAME }} ./dump

      - name: Upload enclave dump
        if: ${{ !cancelled() }}
        uses: actions/upload-artifact@v4
        with:
          name: dump_run_with_cl_el_genesis_${{ github.run_id }}
          path: ./dump
